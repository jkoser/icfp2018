#lang typed/racket

(require "coords.rkt")
(require "model.rkt")
(require "state.rkt")
(require "trace.rkt")

(provide run-system!
         step-system!)


;; Helper for bot-cmd-groups
(: fusions-finder (-> bot CoordDiff
                      (-> (Pairof bot Cmd) Boolean)))
(define (fusions-finder b1 nd1)
  (match-lambda
    ((cons b2 (fusions nd2))
     (and (equal? (bot-pos b1) (c+ (bot-pos b2) nd2))
          (equal? (bot-pos b2) (c+ (bot-pos b1) nd1))))
    (else #f)))

;; Helper for bot-cmd-groups
(: gfill-gvoid-finder (-> (Union 'gfill 'gvoid) Region
                          (-> (Pairof bot Cmd) Boolean)))
(define (gfill-gvoid-finder op reg)
  (match-lambda
    ((cons b2 (or (? (const (eq? op 'gfill)) (gfill nd2 fd2))
                  (? (const (eq? op 'gvoid)) (gvoid nd2 fd2))))
     (let* ((nd2 (cast nd2 CoordDiff))
            (fd2 (cast fd2 CoordDiff))
            (corner (c+ (bot-pos b2) nd2))
            (reg2 (region corner (c+ corner fd2))))
       (equal? reg reg2)))
    (else #f)))

(: bot-cmd-groups (-> (Listof (Pairof bot Cmd))
                      (Listof (Pairof (Listof bot) Cmd))))
(define (bot-cmd-groups bcs)
  ;; Here groups is the result accumulator, pending is the unprocessed input,
  ;; and secondary holds FusionS commands we encounter before FusionP.
  (: loop (-> (Listof (Pairof (Listof bot) Cmd))
              (Listof (Pairof bot Cmd))
              (Listof (Pairof bot Cmd))
              (Listof (Pairof (Listof bot) Cmd))))
  (define (loop groups pending secondary)
    (if (empty? pending)
      (if (empty? secondary)
        groups
        (error "unmatched" secondary))
      (let ((b1 (car (first pending))))
        (match (cdr (first pending))
          ((fusionp nd1)
           (let-values (((matches others)
                         (partition (fusions-finder b1 nd1)
                                    (append (rest pending) secondary))))
             (if (= (length matches) 1)
               (loop (cons (cons (list b1 (car (first matches)))
                                 (fusionp nd1))
                           groups)
                     others
                     '())
               (error "unmatched" (first pending)))))
          ((fusions nd1)
           (loop groups
                 (rest pending)
                 (cons (first pending) secondary)))
          ((or (gfill nd1 fd1)
               (gvoid nd1 fd1))
           (let*-values (((op) (if (gfill? (cdr (first pending)))
                                 'gfill 'gvoid))
                         ((corner) (c+ (bot-pos b1) nd1))
                         ((reg) (region corner (c+ corner fd1)))
                         ((matches others)
                          (partition (gfill-gvoid-finder op reg) pending)))
             (if (= (length matches) (expt 2 (dim reg)))
               (loop (cons (cons (map (inst car bot Cmd) matches)
                                 (if (eq? op 'gfill)
                                   (gfill nd1 fd1)
                                   (gvoid nd1 fd1)))
                           groups)
                     others
                     secondary)
               (error "wrong number of bots" op))))
          (singleton-cmd
            (loop (cons (cons (list b1) singleton-cmd)
                        groups)
                  (rest pending)
                  secondary))))))
  (loop '() bcs '()))


(: execute-cmd-group! (-> (Pairof (Listof bot) Cmd) system Void))
(define (execute-cmd-group! g s)
  (match* ((car g) (cdr g))
    (((list b) (halt))
     (set-system-bots! s '()))
    (((list b) (wait))
     (void))
    (((list b) (flip))
     (if (equal? (system-harmonics s) 'high)
       (set-system-harmonics! s 'low)
       (set-system-harmonics! s 'high)))
    (((list b) (smove lld))
     (let ((c-prime (c+ (bot-pos b) lld)))
       (set-bot-pos! b c-prime)
       (system-add-energy! s (* 2 (mlen lld)))))
    (((list b) (lmove sld1 sld2))
     (let* ((c-prime (c+ (bot-pos b) sld1))
            (c-prime2 (c+ c-prime sld2)))
       (set-bot-pos! b c-prime2)
       (system-add-energy! s (* 2 (+ (mlen sld1) 2 (mlen sld2))))))
    (((list b) (fission nd m))
     (let* ((c-prime (c+ (bot-pos b) nd))
            (b2 (bot-fission! b c-prime m)))
       (set-system-bots! s (cons b2 (system-bots s)))
       (system-add-energy! s 24)))
    (((list b) (sfill nd))
     (let ((c-prime (c+ (bot-pos b) nd)))
       (if (model-voxel-full? (system-model s) c-prime)
         (system-add-energy! s 6)
         (begin
           (model-voxel-fill! (system-model s) c-prime)
           (system-add-energy! s 12)))))
    (((list b) (svoid nd))
     (let ((c-prime (c+ (bot-pos b) nd)))
       (if (model-voxel-full? (system-model s) c-prime)
         (begin
           (model-voxel-void! (system-model s) c-prime)
           (system-add-energy! s -12))
         (system-add-energy! s 3))))
    (((list bp bs) (fusionp nd))
     (set-system-bots! s (filter (lambda (b) (not (eq? b bs)))
                                 (system-bots s)))
     (bot-fusion! bp bs)
     (system-add-energy! s -24))
    ((bots (gfill nd1 fd1))
     (let* ((m (system-model s))
            (corner (c+ (bot-pos (first bots)) nd1))
            (reg (region corner (c+ corner fd1))))
       (for* ((i (in-range (xmin reg) (+ (xmax reg) 1)))
              (j (in-range (ymin reg) (+ (ymax reg) 1)))
              (k (in-range (zmin reg) (+ (zmax reg) 1))))
         (if (model-voxel-full? m (c i j k))
           (system-add-energy! s 6)
           (begin
             (model-voxel-fill! m (c i j k))
             (system-add-energy! s 12))))))
    ((bots (gvoid nd1 fd1))
     (let* ((m (system-model s))
            (corner (c+ (bot-pos (first bots)) nd1))
            (reg (region corner (c+ corner fd1))))
       (for* ((i (in-range (xmin reg) (+ (xmax reg) 1)))
              (j (in-range (ymin reg) (+ (ymax reg) 1)))
              (k (in-range (zmin reg) (+ (zmax reg) 1))))
         (if (model-voxel-full? m (c i j k))
           (begin
             (model-voxel-void! m (c i j k))
             (system-add-energy! s -12))
           (system-add-energy! s 3)))))))


(: step-system! (-> system Void))
(define (step-system! s)
  (define bots
    ((inst sort bot Natural) (system-bots s) < #:key bot-bid))
  (define n (length bots))
  (define bot-cmds : (Listof (Pairof bot Cmd))
    (for/list ((b bots) (c (system-trace s)))
      (cons b c)))
  (when (< (length bot-cmds) n)
      (error "not enough commands"))
  (define cmd-groups (bot-cmd-groups bot-cmds))
  (define r (model-res (system-model s)))
  (if (equal? (system-harmonics s) 'high)
    (system-add-energy! s (* 30 r r r))
    (system-add-energy! s (* 3 r r r)))
  (system-add-energy! s (* 20 n))
  (for ((g cmd-groups))
    (execute-cmd-group! g s))
  (set-system-trace! s (drop (system-trace s) n))
  (set-system-time! s (+ (system-time s) 1)))


(: run-system! (-> system Void))
(define (run-system! s)
  (do ()
    ((empty? (system-bots s)))
    (step-system! s)))
